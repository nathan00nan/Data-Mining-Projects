1. The code imports the necessary libraries - pandas, numpy, statsmodels.api from statsmodels, and the relevant modules from scikit-learn.
2. The dataset is read using the pandas `read_csv()` function and stored in the variable `data`.
3. The "Date" column in the dataset is converted to datetime format using the `to_datetime()` method of pandas.
4. The orders for the SARIMA model are defined: p, d, q represent the non-seasonal orders, and P, D, Q, S represent the seasonal orders.
5. A SARIMA model (`model`) is initialized using the `SARIMAX()` function from statsmodels and the orders defined.
6. The SARIMA model is fitted to the data using the `fit()` method.
7. The predictions for the model are obtained using the `get_prediction()` method.
8. The predicted mean values are extracted from the predictions using the `predicted_mean` attribute.
9. The actual values from the dataset are extracted and stored in `actual_values`.
10. Mean absolute error (MAE), root mean squared error (RMSE), and R-squared (R^2) are calculated using scikit-learn's functions for these metrics.
11. The MAE, RMSE, and R^2 values are printed.
12. Future predictions are made using the `predict()` method of the SARIMA model, specifying the start and end indices.
13. The future predictions are printed.
14. A plot is created using the `plot()` method of pandas dataframe to visualize the training data and the future predictions.
